#!/usr/bin/env python3

# See https://www.unicode.org/reports/tr44/#Character_Decomposition_Mappings

import sys

print(" // NOTE: File generated by generate-decomposition-info.py - do not edit")
print("")
print("#include <vector>")
print("#include <cstdint>")
print("#include \"utfdecode.hpp\"")
print("")
print("const uint32_t unicode_decompose_lookup[] = {")
first = True
canonical_dict = {}
compatible_dict = {}
lookup_index = 0
for line in open("UnicodeData.txt"):
    parts = line.split(';')
    decomposition_info = parts[5]
    if not decomposition_info: continue
    decomposition_parts = decomposition_info.split(" ")
    if '<' in decomposition_parts[0]:
        decomposition_parts = decomposition_parts[1:]
        compatible_dict[parts[0]] = (lookup_index, len(decomposition_parts))
    else:
        canonical_dict[parts[0]] = (lookup_index, len(decomposition_parts))
    lookup_index += len(decomposition_parts)
    for value in decomposition_parts:
        prefix = ", "
        if first:
            prefix = ""
            first = False
        print(prefix + "0x" + value)
print("};")
print("")
print("uint32_t const* unicode_decompose(uint32_t codePoint, bool compatible, uint8_t* len) {")
print("  switch (codePoint) {")
for code_point, (lookup_index, lookup_len) in canonical_dict.items():
    print("    case 0x" + code_point + ": *len = " + str(lookup_len) + "; return &unicode_decompose_lookup[" + str(lookup_index) + "];")
print("  }")
print("")
print("  if (compatible) switch(codePoint) {")
for code_point, (lookup_index, lookup_len) in compatible_dict.items():
    print("    case 0x" + code_point + ": *len = " + str(lookup_len) + "; return &unicode_decompose_lookup[" + str(lookup_index) + "];")
print("  }")
print("  *len = 0;")
print("  return nullptr;")
print("}")
print("")

